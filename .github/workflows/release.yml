name: Release Automation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  FORCE_COLOR: 1

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      major-version: ${{ steps.release.outputs.major }}
    steps:
      - name: Create Release PR or Release
        id: release
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c # v4.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node

  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release-created == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      major-version: ${{ steps.version.outputs.major-version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      tag-name: ${{ steps.version.outputs.tag-name }}
    steps:
      - name: Validate semver tag
        id: version
        run: |
          tag="${{ needs.release-please.outputs.tag-name }}"
          if [[ ! "$tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error::Invalid semver tag format: $tag"
            exit 1
          fi

          version="${tag#v}"
          major_version="v${BASH_REMATCH[1]}"
          is_prerelease="false"

          if [[ -n "${BASH_REMATCH[4]}" ]]; then
            is_prerelease="true"
          fi

          {
            echo "version=$version";
            echo "major-version=$major_version";
            echo "is-prerelease=$is_prerelease";
            echo "tag-name=$tag";
          } >> "$GITHUB_OUTPUT"

          echo "Tag: $tag"
          echo "Version: $version"
          echo "Major version: $major_version"
          echo "Is prerelease: $is_prerelease"

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag]
    if: needs.release-please.outputs.release-created == 'true'
    strategy:
      fail-fast: false
      matrix:
        node-version: [22, 24]
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup mise
        uses: jdx/mise-action@5ac50f778e26fac95da98d50503682459e86d566 # v3.2.0
        with:
          install: true
          cache: true

      - name: Override Node.js version for matrix testing
        run: |
          echo "node ${{ matrix.node-version }}" > .mise.toml.local
          mise install

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite (Node ${{ matrix.node-version }})
        run: |
          pnpm run check
          pnpm run lint --max-warnings=0
          pnpm run test:coverage

      - name: Build and package (Node ${{ matrix.node-version }})
        run: |
          pnpm run build
          pnpm run package

      - name: Verify dist is clean
        run: |
          if [ "$(git diff --ignore-space-at-eol --text dist/ | wc -l)" -gt "0" ]; then
            echo "::error::Build produced uncommitted changes in dist/"
            git diff --ignore-space-at-eol --text "dist/"
            exit 1
          fi

      - name: Upload release artifacts (Node ${{ matrix.node-version }})
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: release-artifacts-node${{ matrix.node-version }}-${{ github.sha }}
          path: |
            dist/
            lib/
            *.md
            LICENSE
            package.json
            action.yml
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag, build]
    if: needs.release-please.outputs.release-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download release artifacts (Node 22)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-artifacts-node22-${{ github.sha }}
          path: release-node22

      - name: Download release artifacts (Node 24)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-artifacts-node24-${{ github.sha }}
          path: release-node24

      - name: Select primary release artifacts (Node 24)
        run: |
          # Use Node 24 build as primary release artifacts
          cp -r release-node24/* .
          echo "Using Node 24 build as primary release artifacts"

      - name: Generate enhanced changelog and release notes
        id: release-notes
        run: |
          # Install conventional-changelog-cli for better changelog generation
          npm install -g conventional-changelog-cli@4.1.0

          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1 || echo "")
          CURRENT_TAG="${{ needs.release-please.outputs.tag-name }}"
          VERSION="${CURRENT_TAG#v}"

          printf "Generating changelog from %s to %s\n" "$PREVIOUS_TAG" "$CURRENT_TAG"

          # Generate conventional changelog
          if [[ -n "$PREVIOUS_TAG" ]]; then
            conventional-changelog -p conventionalcommits -r 2 > temp_changelog.md
          else
            printf "# Changelog\n\n## [%s] - %s\n\n### Added\n- Initial release of conditional-paths-action" "$VERSION" "$(date -u +%Y-%m-%d)" > temp_changelog.md
          fi

          # Create comprehensive release notes
          {
            printf "## üöÄ What's New in %s\n\n" "$CURRENT_TAG"
          } > release_notes.md

          # Extract changes from conventional changelog
          if [[ -n "$PREVIOUS_TAG" ]]; then
            # Parse git log for conventional commits and categorize
            {
              echo "### ‚ú® Features"
              git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s" --no-merges | grep -E "^feat(\(.+\))?:" | sed 's/^feat\(([^)]*)\)\?:\s*/* /' || echo "No new features"
              echo ""
              echo "### üêõ Bug Fixes"
              git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s" --no-merges | grep -E "^fix(\(.+\))?:" | sed 's/^fix\(([^)]*)\)\?:\s*/* /' || echo "No bug fixes"
              echo ""
              echo "### üìö Documentation"
              git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s" --no-merges | grep -E "^docs(\(.+\))?:" | sed 's/^docs\(([^)]*)\)\?:\s*/* /' || echo "No documentation changes"
              echo ""
              echo "### ‚ö° Performance"
              git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s" --no-merges | grep -E "^perf(\(.+\))?:" | sed 's/^perf\(([^)]*)\)\?:\s*/* /' || echo "No performance improvements"
              echo ""
              echo "### üîß Maintenance"
              git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s" --no-merges | grep -E "^(chore|ci|build|refactor)(\(.+\))?:" | sed 's/^[^:]*:\s*/* /' || echo "No maintenance changes"
              echo ""
            } >> release_notes.md

            # Add commit count and contributors
            COMMIT_COUNT=$(git rev-list --count "$PREVIOUS_TAG..$CURRENT_TAG")
            CONTRIBUTORS=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --format='%an' --no-merges | sort -u | wc -l | tr -d ' ')

            {
              echo "### üìä Release Statistics"
              echo "- **$COMMIT_COUNT** commits since $PREVIOUS_TAG"
              echo "- **$CONTRIBUTORS** contributor(s) to this release"
              echo ""
            } >> release_notes.md
          else
            {
              echo "### üéâ Initial Release"
              echo "- Complete TypeScript GitHub Action for conditional path filtering"
              echo "- Node.js 22 runtime with modern ESM support"
              echo "- Comprehensive test coverage (80%+)"
              echo "- SBOM generation and security compliance"
              echo "- DevSecOps CI/CD pipeline"
              echo ""
            } >> release_notes.md
          fi

          # Add security and compliance info
          {
            echo "### üîí Security & Compliance"
            echo "- ‚úÖ SBOM (Software Bill of Materials) included"
            echo "- ‚úÖ All dependencies scanned for vulnerabilities"
            echo "- ‚úÖ License compliance verified"
            echo "- ‚úÖ Secret scanning completed"
            echo "- üìÑ [View SBOM](https://santosr2.github.io/conditional-paths-action/sbom/)"
          } >> release_notes.md

          {
            echo ""
            echo "## üìñ Usage"
            echo ""
            echo '```yaml'
            echo "- uses: santosr2/conditional-paths-action@$CURRENT_TAG"
            echo "  with:"
            echo "    filters: |"
            echo "      frontend:"
            echo "        - 'src/frontend/**'"
            echo "      backend:"
            echo "        - 'src/backend/**'"
            echo "      docs:"
            echo "        - '*.md'"
            echo "        - 'docs/**'"
            echo '```'
            echo ""
            echo "## üîó Links"
            echo "- üìñ [Documentation](https://santosr2.github.io/conditional-paths-action/)"
            echo "- üõ°Ô∏è [Security Report](https://santosr2.github.io/conditional-paths-action/security/)"
            echo "- ‚ö° [Performance Report](https://santosr2.github.io/conditional-paths-action/performance/)"
            if [[ -n "$PREVIOUS_TAG" ]]; then
              echo "- üìã [Full Changelog](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...$CURRENT_TAG)"
            fi
            echo ""
          } >> release_notes.md

          # Set output for release creation
          {
            echo 'notes<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Update GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          tag_name: ${{ needs.release-please.outputs.tag-name }}
          name: Release ${{ needs.release-please.outputs.tag-name }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
          generate_release_notes: false
          append_body: false
          make_latest: true

  update-major-tag:
    name: Update Major Version Tag
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag, create-release]
    if:
      needs.release-please.outputs.release-created == 'true' &&
      needs.validate-tag.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update major version tag
        run: |
          major_tag="${{ needs.validate-tag.outputs.major-version }}"
          current_tag="${{ needs.release-please.outputs.tag-name }}"

          echo "Updating $major_tag to point to $current_tag"

          # Delete the major tag if it exists
          git push origin --delete "$major_tag" || true

          # Create new major tag pointing to current release
          git tag -fa "$major_tag" -m "Update $major_tag to $current_tag"
          git push origin "$major_tag"

  integration-test:
    name: Test Released Action
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag, create-release]
    if: needs.release-please.outputs.release-created == 'true'
    steps:
      - name: Checkout action repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download build artifacts (Node 24)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-artifacts-node24-${{ github.sha }}

      - name: Checkout test repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: actions/checkout
          path: test-repo

      - name: Test released action
        uses: ./
        id: changes
        with:
          working-directory: test-repo
          filters: |
            workflow:
              - '.github/**'
            src:
              - 'src/**'
            docs:
              - '*.md'

      - name: Verify action works
        run: |
          echo "Testing completed successfully!"
          echo "Workflow files changed: ${{ steps.changes.outputs.workflow }}"
          echo "Source files changed: ${{ steps.changes.outputs.src }}"
          echo "Docs changed: ${{ steps.changes.outputs.docs }}"
