name: Release Automation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  FORCE_COLOR: 1

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      major-version: ${{ steps.release.outputs.major }}
      pr-number: ${{ steps.release.outputs.pr }}
    steps:
      - name: Create Release PR or Release
        id: release
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c # v4.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          config-file: release-please-config.json

  enhance-release-pr:
    name: Enhance Release PR with Authors
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.pr-number != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Enhance PR body with commit authors
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.release-please.outputs.pr-number }}"
          echo "Enhancing PR #$PR_NUMBER with author information"

          # Get the current PR body
          PR_BODY=$(gh pr view "$PR_NUMBER" --json body -q .body)

          # Get the last release tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1 || echo "")

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Found previous tag: $PREVIOUS_TAG"

            # Generate author credits section
            AUTHOR_CREDITS=""
            AUTHOR_CREDITS="${AUTHOR_CREDITS}"$'\n\n'"## 👥 Contributors"$'\n\n'

            # Get unique contributors since last release
            CONTRIBUTORS=$(git log "$PREVIOUS_TAG..HEAD" --format='%an' --no-merges | sort -u)

            while IFS= read -r contributor; do
              AUTHOR_CREDITS="${AUTHOR_CREDITS}• **${contributor}**"$'\n'
            done <<< "$CONTRIBUTORS"

            # Add commit details with authors
            AUTHOR_CREDITS="${AUTHOR_CREDITS}"$'\n'"## 📝 Commits by Author"$'\n\n'

            # Group commits by type with authors
            for type in feat fix docs perf deps ci refactor test chore build; do
              case $type in
                feat) section="### Features" ;;
                fix) section="### Bug Fixes" ;;
                docs) section="### Documentation" ;;
                perf) section="### Performance" ;;
                deps) section="### Dependencies" ;;
                ci) section="### CI/CD" ;;
                refactor) section="### Refactoring" ;;
                test) section="### Testing" ;;
                chore) section="### Maintenance" ;;
                build) section="### Build System" ;;
              esac

              # Filter commits for this type - simplified pattern to avoid shellcheck issues
              COMMITS=""
              while IFS= read -r line; do
                if echo "$line" | grep -q "^${type}"; then
                  # Remove type prefix and add bullet point
                  cleaned="• ${line#"${type}"*: }"
                  COMMITS="${COMMITS}${cleaned}"$'\n'
                fi
              done < <(git log "$PREVIOUS_TAG..HEAD" --pretty=format:"%s (@%an)" --no-merges)

              if [[ -n "$COMMITS" ]]; then
                AUTHOR_CREDITS="${AUTHOR_CREDITS}${section}"$'\n'"${COMMITS}"
              fi
            done

            # Update PR body with author information
            NEW_BODY="${PR_BODY}"$'\n\n'"---"$'\n'"${AUTHOR_CREDITS}"

            # Escape the body for gh pr edit
            echo "$NEW_BODY" > /tmp/pr_body.txt
            gh pr edit "$PR_NUMBER" --body-file /tmp/pr_body.txt

            echo "PR #$PR_NUMBER has been enhanced with author information"
          else
            echo "No previous release tag found, skipping author enhancement"
          fi

  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release-created == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      major-version: ${{ steps.version.outputs.major-version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      tag-name: ${{ steps.version.outputs.tag-name }}
    steps:
      - name: Validate semver tag
        id: version
        run: |
          tag="${{ needs.release-please.outputs.tag-name }}"
          if [[ ! "$tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error::Invalid semver tag format: $tag"
            exit 1
          fi

          version="${tag#v}"
          major_version="v${BASH_REMATCH[1]}"
          is_prerelease="false"

          if [[ -n "${BASH_REMATCH[4]}" ]]; then
            is_prerelease="true"
          fi

          {
            echo "version=$version";
            echo "major-version=$major_version";
            echo "is-prerelease=$is_prerelease";
            echo "tag-name=$tag";
          } >> "$GITHUB_OUTPUT"

          echo "Tag: $tag"
          echo "Version: $version"
          echo "Major version: $major_version"
          echo "Is prerelease: $is_prerelease"

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag]
    if: needs.release-please.outputs.release-created == 'true'
    strategy:
      fail-fast: false
      matrix:
        node-version: [22, 24]
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup mise
        uses: jdx/mise-action@5ac50f778e26fac95da98d50503682459e86d566 # v3.2.0
        with:
          install: true
          cache: true

      - name: Override Node.js version for matrix testing
        run: |
          echo "node ${{ matrix.node-version }}" > .mise.toml.local
          mise install

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite (Node ${{ matrix.node-version }})
        run: |
          pnpm run check
          pnpm run lint --max-warnings=0
          pnpm run test:coverage

      - name: Build and package (Node ${{ matrix.node-version }})
        run: |
          pnpm run build
          pnpm run package

      - name: Verify dist is clean
        run: |
          if [ "$(git diff --ignore-space-at-eol --text dist/ | wc -l)" -gt "0" ]; then
            echo "::error::Build produced uncommitted changes in dist/"
            git diff --ignore-space-at-eol --text "dist/"
            exit 1
          fi

      - name: Upload release artifacts (Node ${{ matrix.node-version }})
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: release-artifacts-node${{ matrix.node-version }}-${{ github.sha }}
          path: |
            dist/
            lib/
            *.md
            LICENSE
            package.json
            action.yml
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag, build]
    if: needs.release-please.outputs.release-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download release artifacts (Node 22)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-artifacts-node22-${{ github.sha }}
          path: release-node22

      - name: Download release artifacts (Node 24)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-artifacts-node24-${{ github.sha }}
          path: release-node24

      - name: Select primary release artifacts (Node 24)
        run: |
          # Use Node 24 build as primary release artifacts
          cp -r release-node24/* .
          echo "Using Node 24 build as primary release artifacts"

      - name: Generate enhanced changelog and release notes
        id: release-notes
        run: |
          # Install conventional-changelog-cli for better changelog generation
          npm install -g conventional-changelog-cli@4.1.0

          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1 || echo "")
          CURRENT_TAG="${{ needs.release-please.outputs.tag-name }}"
          VERSION="${CURRENT_TAG#v}"

          printf "Generating changelog from %s to %s\n" "$PREVIOUS_TAG" "$CURRENT_TAG"

          # Debug: Show available tags and commits
          echo "Available tags:"
          git tag --sort=-version:refname | head -5

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Commits between $PREVIOUS_TAG and $CURRENT_TAG:"
            git log "$PREVIOUS_TAG..$CURRENT_TAG" --oneline --no-merges | head -10
          fi

          # Generate conventional changelog
          if [[ -n "$PREVIOUS_TAG" ]]; then
            conventional-changelog -p conventionalcommits -r 2 > temp_changelog.md
          else
            printf "# Changelog\n\n## [%s] - %s\n\n### Added\n- Initial release of conditional-paths-action" "$VERSION" "$(date -u +%Y-%m-%d)" > temp_changelog.md
          fi

          # Create comprehensive release notes
          {
            printf "## 🚀 What's New in %s\n\n" "$CURRENT_TAG"
          } > release_notes.md

          # Extract changes from conventional changelog
          if [[ -n "$PREVIOUS_TAG" ]]; then
            # Parse git log for conventional commits and categorize with authors
            {
              echo "### ✨ Features"
              FEATURES=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s (@%an)" --no-merges | { grep -E "^feat(\\([^)]+\\))?:" || true; } | sed -E 's/^feat(\\([^)]+\\))?:\\s*/- /')
              if [[ -n "$FEATURES" ]]; then
                echo "$FEATURES"
              else
                echo "- No new features in this release"
              fi
              echo ""

              echo "### 🐛 Bug Fixes"
              FIXES=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s (@%an)" --no-merges | { grep -E "^fix(\\([^)]+\\))?:" || true; } | sed -E 's/^fix(\\([^)]+\\))?:\\s*/- /')
              if [[ -n "$FIXES" ]]; then
                echo "$FIXES"
              else
                echo "- No bug fixes in this release"
              fi
              echo ""

              echo "### 📚 Documentation"
              DOCS=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s (@%an)" --no-merges | { grep -E "^docs(\\([^)]+\\))?:" || true; } | sed -E 's/^docs(\\([^)]+\\))?:\\s*/- /')
              if [[ -n "$DOCS" ]]; then
                echo "$DOCS"
              else
                echo "- No documentation changes in this release"
              fi
              echo ""

              echo "### ⚡ Performance"
              PERF=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s (@%an)" --no-merges | { grep -E "^perf(\\([^)]+\\))?:" || true; } | sed -E 's/^perf(\\([^)]+\\))?:\\s*/- /')
              if [[ -n "$PERF" ]]; then
                echo "$PERF"
              else
                echo "- No performance improvements in this release"
              fi
              echo ""

              echo "### 🔧 Maintenance"
              MAINT=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%s (@%an)" --no-merges | { grep -E "^(chore|ci|build|refactor)(\\([^)]+\\))?:" || true; } | sed -E 's/^[^:]+:\\s*/- /')
              if [[ -n "$MAINT" ]]; then
                echo "$MAINT"
              else
                echo "- No maintenance changes in this release"
              fi
              echo ""
            } >> release_notes.md

            # Add commit count and contributors
            COMMIT_COUNT=$(git rev-list --count "$PREVIOUS_TAG..$CURRENT_TAG")
            CONTRIBUTOR_LIST=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --format='%an' --no-merges | sort -u)
            CONTRIBUTOR_COUNT=$(echo "$CONTRIBUTOR_LIST" | wc -l | tr -d ' ')

            {
              echo "### 📊 Release Statistics"
              echo "- **$COMMIT_COUNT** commits since $PREVIOUS_TAG"
              echo "- **$CONTRIBUTOR_COUNT** contributor(s) to this release"
              echo ""
              echo "### 👥 Contributors"
              echo "Thanks to the following contributors for this release:"
              echo ""
              while IFS= read -r contributor; do
                # Try to extract GitHub username from git config or use name as-is
                # Common patterns: "Name", "username", "Name (username)"
                if echo "$contributor" | grep -q '(.*)'; then
                  # Extract username from parentheses if present
                  # Extract username using parameter expansion
                  temp="${contributor#*(}"
                  username="${temp%)}"
                  echo "- [@$username](https://github.com/$username) ($contributor)"
                else
                  # Use the name as-is, attempting to link it
                  echo "- **$contributor**"
                fi
              done <<< "$CONTRIBUTOR_LIST"
              echo ""
              echo "### 📝 Full Changelog"
              echo "<details>"
              echo "<summary>View all commits</summary>"
              echo ""
              echo "| Commit | Author | Message |"
              echo "|--------|--------|---------|"
              # Use a while loop to properly escape commit messages
              git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"%h|%an|%s" --no-merges | while IFS='|' read -r hash author message; do
                # Escape pipe characters in the message
                escaped_message="${message//|/\\|}"
                echo "| [\`$hash\`](https://github.com/${{ github.repository }}/commit/$hash) | **$author** | $escaped_message |"
              done
              echo ""
              echo "</details>"
              echo ""
            } >> release_notes.md
          else
            {
              echo "### 🎉 Initial Release"
              echo "- Complete TypeScript GitHub Action for conditional path filtering"
              echo "- Node.js 22 runtime with modern ESM support"
              echo "- Comprehensive test coverage (80%+)"
              echo "- SBOM generation and security compliance"
              echo "- DevSecOps CI/CD pipeline"
              echo ""
            } >> release_notes.md
          fi

          # Add security and compliance info
          {
            echo "### 🔒 Security & Compliance"
            echo "- ✅ SBOM (Software Bill of Materials) included"
            echo "- ✅ All dependencies scanned for vulnerabilities"
            echo "- ✅ License compliance verified"
            echo "- ✅ Secret scanning completed"
            echo "- 📄 [View SBOM](https://santosr2.github.io/conditional-paths-action/sbom/)"
          } >> release_notes.md

          {
            echo ""
            echo "## 📖 Usage"
            echo ""
            echo '```yaml'
            echo "- uses: santosr2/conditional-paths-action@$CURRENT_TAG"
            echo "  with:"
            echo "    filters: |"
            echo "      frontend:"
            echo "        - 'src/frontend/**'"
            echo "      backend:"
            echo "        - 'src/backend/**'"
            echo "      docs:"
            echo "        - '*.md'"
            echo "        - 'docs/**'"
            echo '```'
            echo ""
            echo "## 🔗 Links"
            echo "- 📖 [Documentation](https://santosr2.github.io/conditional-paths-action/)"
            echo "- 🛡️ [Security Report](https://santosr2.github.io/conditional-paths-action/security/)"
            echo "- ⚡ [Performance Report](https://santosr2.github.io/conditional-paths-action/performance/)"
            if [[ -n "$PREVIOUS_TAG" ]]; then
              echo "- 📋 [Full Changelog](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...$CURRENT_TAG)"
            fi
            echo ""
          } >> release_notes.md

          # Set output for release creation
          {
            echo 'notes<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Update GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          tag_name: ${{ needs.release-please.outputs.tag-name }}
          name: Release ${{ needs.release-please.outputs.tag-name }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
          generate_release_notes: false
          append_body: false
          make_latest: true

  update-major-tag:
    name: Update Major Version Tag
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag, create-release]
    if:
      needs.release-please.outputs.release-created == 'true' &&
      needs.validate-tag.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update major version tag
        run: |
          major_tag="${{ needs.validate-tag.outputs.major-version }}"
          current_tag="${{ needs.release-please.outputs.tag-name }}"

          echo "Updating $major_tag to point to $current_tag"

          # Check if the major tag exists remotely
          if git ls-remote --tags origin | grep -q "refs/tags/$major_tag"; then
            echo "Tag $major_tag exists remotely, deleting it first"
            git push origin --delete "$major_tag"
          else
            echo "Tag $major_tag does not exist remotely, will create it"
          fi

          # Create new major tag pointing to current release
          git tag -fa "$major_tag" -m "Update $major_tag to $current_tag"
          git push origin "$major_tag"

  integration-test:
    name: Test Released Action
    runs-on: ubuntu-latest
    needs: [release-please, validate-tag, create-release]
    if: needs.release-please.outputs.release-created == 'true'
    steps:
      - name: Checkout action repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download build artifacts (Node 24)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-artifacts-node24-${{ github.sha }}

      - name: Checkout test repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: actions/checkout
          ref: main
          path: test-repo

      - name: Test released action
        uses: ./
        id: changes
        with:
          working-directory: test-repo
          filters: |
            workflow:
              - '.github/**'
            src:
              - 'src/**'
            docs:
              - '*.md'

      - name: Verify action works
        run: |
          echo "Testing completed successfully!"
          echo "Workflow files changed: ${{ steps.changes.outputs.workflow }}"
          echo "Source files changed: ${{ steps.changes.outputs.src }}"
          echo "Docs changed: ${{ steps.changes.outputs.docs }}"
